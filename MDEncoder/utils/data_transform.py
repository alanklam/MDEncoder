import numpy as np
from sklearn.model_selection import train_test_split

class preprocessing:
    def __init__(self):
        self.x_bar = None 
        self.y_bar = None 
        self.z_bar = None
        self.xyz_max = None

    def transform(self,data):
        assert np.shape(data)[0] > 0
        #assume 3D coordinate
        assert np.shape(data)[1] % 3 == 0
        #mean-centered x,y,z position and normalized by max of (x,y,z) ALL atoms, range from -1 to 1
        self.x_bar, self.y_bar, self.z_bar = np.mean(data[:,0::3]), np.mean(data[:,1::3]) , np.mean(data[:,2::3])
        self.xyz_max = max(np.max(data),-np.min(data))
        data[:,0::3] = data[:,0::3]-self.x_bar
        data[:,1::3] = data[:,1::3]-self.y_bar
        data[:,2::3] = data[:,2::3]-self.z_bar
        print("Data dimension: {0}".format(np.shape(data)))
        
        return data/self.xyz_max
    
    #define inverse transform function
    def inverse_transform(self,data):
        assert np.shape(data)[0] > 0
        #assume 3D coordinate
        assert np.shape(data)[1] % 3 == 0
        
        data = generated*self.xyz_max
        data[:,0::3] = data[:,0::3] + self.x_bar
        data[:,1::3] = data[:,1::3] + self.y_bar
        data[:,2::3] = data[:,2::3] + self.z_bar
        return data


def generate_pdb(samples,pdbname,namelist):
    N_frame , N_atom = np.shape(samples)[0], np.shape(samples)[1]//3
    with open(pdbname, 'w') as pdb:
        pdb.write('REMARK generated by MDEncoder\n')
        for i in range(N_frame):
            for j in range(N_atom):
                seg, resid, atom, _ =  namelist[3*j].split('_')
                pdb.write("ATOM{0:7d}{1:>5s}{2:>4s}{3:>2.1s}{4:>4s}{5:12.3f}{6:8.3f}{7:8.3f}{8:6.2f}{9:6.2f}{10:>7s}{11:>5.1s}\n".
                          format(j+1,atom,'ALA',seg,resid,samples[i,3*j],samples[i,3*j+1],samples[i,3*j+2],1.00,0.00,seg,atom))
            pdb.write('END\n')
    print('Generated pdb to',pdbname,'!')